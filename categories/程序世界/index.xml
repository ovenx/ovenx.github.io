<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程序世界 on owen&#39;s blog</title>
    <link>https://blog.ovenx.cn/categories/%E7%A8%8B%E5%BA%8F%E4%B8%96%E7%95%8C/</link>
    <description>Recent content in 程序世界 on owen&#39;s blog</description>
    <image>
      <url>https://blog.ovenx.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.ovenx.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 02 Feb 2021 18:00:00 +0800</lastBuildDate><atom:link href="https://blog.ovenx.cn/categories/%E7%A8%8B%E5%BA%8F%E4%B8%96%E7%95%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Systemd 部署 Golang 应用</title>
      <link>https://blog.ovenx.cn/post/go-deploy/</link>
      <pubDate>Tue, 02 Feb 2021 18:00:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/go-deploy/</guid>
      <description>新建 systemd 文件 在 /etc/systemd/system/ 目录下新建service example.servie
1 2 3 4 5 6 7 8 9 10 11 12 13 14  [Unit] Description=example [Service] Type=simple Restart=always RestartSec=5 ExecStart=/www/example/main # 可执行文件的路径 ExecReload=/bin/kill -HUP $MAINPID PIDFile=/var/run/example.pid # pid file WorkingDirectory=/www/example [Install] WantedBy=multi-user.target   重新加载配置文件
1  systemctl daemon-reload   常用操作
1 2 3  systemctl start example systemctl restart example # 重启 systemctl enable example # 添加自启动   配置 nginx 代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  server { server_name example.</description>
    </item>
    
    <item>
      <title>PostgreSQL 使用教程</title>
      <link>https://blog.ovenx.cn/post/postgresql/</link>
      <pubDate>Mon, 25 Jan 2021 17:45:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/postgresql/</guid>
      <description>安装环境  Linux 版本： centos 7.6 PostgreSQL 版本：13  安装 postgresql 1 2 3 4 5  sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86\_64/pgdg-redhat-repo-latest.noarch.rpm sudo yum install -y postgresql13-server sudo /usr/pgsql-13/bin/postgresql-13-setup initdb sudo systemctl enable postgresql-13 sudo systemctl start postgresql-13   参考来源：https://www.postgresql.org/download/linux/redhat/
添加用户和数据库 使用 psql 1 2 3 4 5 6  sudo -u postgres psql # 切换为 postgres 用户登录 psql \password # 设置默认密码 create user myuser with password &amp;#39;mypass&amp;#39;; # 添加用户 create database mydb OWNER myuser; # 添加数据库 grant all privileges on database mydb to myuser; # 添加权限 \q # quit   使用 shell 1 2 3 4 5  sudo -u postgres createuser --superuser myuser; # 添加用户 sudo -u postgres psql # 登录 psql 设置密码 \password myuser \q sudo -u postgres createdb -O myuser mydb # 添加数据库   登录数据库 本地登录 1  psql -h 127.</description>
    </item>
    
    <item>
      <title>WSL2 常见问题</title>
      <link>https://blog.ovenx.cn/post/wsl2-config/</link>
      <pubDate>Thu, 03 Dec 2020 15:24:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/wsl2-config/</guid>
      <description>安装 wsl2 开启 wsl2
1 2  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart   设置默认 wsl2
1  wsl --set-default-version 2   设置默认发行版
1  wsl -s Ubuntu-20.04   启动和停止 wsl 服务 1 2  wsl --shutdown # net stop LxssManager   文件权限问题 由于 windows 文件系统是 NTFS, 在 wsl 在所有的文件权限都会是 777。解决方法是修改配置文件 /etc/wsl.conf
1 2 3 4  [automount] enabled = true options = &amp;#34;metadata,umask=22,fmask=11&amp;#34; mountFsTab = false   重启后文件的权限就不再都是 777 了。</description>
    </item>
    
    <item>
      <title>Git 常用操作笔记</title>
      <link>https://blog.ovenx.cn/post/git-notes/</link>
      <pubDate>Wed, 29 Jul 2020 08:00:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/git-notes/</guid>
      <description>提交 pull request 的最佳实践 1. 首先 fork 仓库 添加一个自己的仓库副本
2. 添加 upstream source 1  git remote add upstrem URL   3. 创建一个 dev 分支 1 2  git checkout -b dev git commit -m &amp;#34;add new feature&amp;#34;   4. 开发及测试完成后 Rebase 1 2  git fetch upstream git rebase upstream/master   5. 推送本地开发分支 1  git push origin dev   6. 发起 pull request 在 github 上发起 pull request，选择 dev 分支，填好对应的 description</description>
    </item>
    
    <item>
      <title>MySQL 设置默认编码为 utf8mb4</title>
      <link>https://blog.ovenx.cn/post/mysql-utf8mb4/</link>
      <pubDate>Tue, 30 Jun 2020 10:37:16 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/mysql-utf8mb4/</guid>
      <description>mariadb 修改配置文件
1 2 3 4 5 6  vim /etc/my.conf.d/server.conf [mysqld] character_set_server=utf8mb4 collation-server=utf8mb4_general_ci init_connect=&amp;#39;SET NAMES utf8mb4&amp;#39; skip-character-set-client-handshake=true   重启 mariadb
1  systemctl restart mariadb   查看编码
1  SHOW VARIABLES WHERE Variable_name LIKE &amp;#39;character\_set\_%&amp;#39; OR Variable_name LIKE &amp;#39;collation%&amp;#39;;   mysql 修改配置文件
1 2 3 4 5 6 7 8 9 10 11  vim /etc/my.cnf [client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character_set_server=utf8mb4 collation-server=utf8mb4_general_ci init_connect=&amp;#39;SET NAMES utf8mb4&amp;#39; skip-character-set-client-handshake=true   重启 mariadb</description>
    </item>
    
    <item>
      <title>WSL2 Ubuntu 配置</title>
      <link>https://blog.ovenx.cn/post/wsl2-ubuntu/</link>
      <pubDate>Tue, 23 Jun 2020 18:24:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/wsl2-ubuntu/</guid>
      <description>系统版本：Ubuntu-20.04
配置国内源 修改 source.list
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  cp /etc/apt/source.list /etc/apt/source.list.bak vi source.list # 复制下面内容到 source.list deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.</description>
    </item>
    
    <item>
      <title>Linux 下搭建 git 服务器</title>
      <link>https://blog.ovenx.cn/post/deploy-git/</link>
      <pubDate>Mon, 16 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/deploy-git/</guid>
      <description>安装 git 1  yum install git git-core   创建 git 用户 为了服务器的安全，一般不会直接使用 root 用户来运行 git 服务。我们可以新建一个 git 用户专门用来执行 git 服务。
1 2 3 4 5 6 7 8 9 10  # 添加一个 git 用户 sudo adduser git # 设置密码 passwd git # 禁用shell登录 sudo vi /etc/passwd git: x:1001:1002:,,,:/home/git:/bin/bash # 修改为下面的 git: x:1001:1002:,,,:/home/git:/usr/bin/git-shell   这样，git 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为我们为 git 用户指定的 git-shell每次一登录就自动退出。
创建证书登录 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件里，一行一个。</description>
    </item>
    
    <item>
      <title>PHP 配合 Rsync 同步推送代码到服务器</title>
      <link>https://blog.ovenx.cn/post/rsync-php/</link>
      <pubDate>Thu, 12 Mar 2020 10:00:41 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/rsync-php/</guid>
      <description>前言 之前搭建公司开发环境有一个需求，需要将本地测试服务器中的代码同步推送到线上的服务器。后面开始研究 rsync，中途踩了很多坑，故在此记录下一些主要的操作和注意事项
Rsync 设置 本地同步 同步单个文件
1  rsync -avz /etc/passwd /tmp/ # 同步 passwd 文件到 tmp 目录下   同步目录下所有文件（包含目录本身）
1 2 3  mkdir /root/test1 echo &amp;#34;test1&amp;#34; &amp;gt; /root/test1/file1 rsync -avz /root/test1 /tmp/ # 同步 test1 目录 文件到 tmp 目录下   同步目录下所有文件（不包含目录本身）
1 2 3  mkdir /root/test2 echo &amp;#34;test&amp;#34; &amp;gt; /root/test2/file2 rsync -avz /root/test2/ /tmp/ # 同步 test2 目录 文件到 tmp 目录下    特别注意后面以 / 结尾不包含目录，没有 / 则包含目录</description>
    </item>
    
    <item>
      <title>常用工具国内源配置</title>
      <link>https://blog.ovenx.cn/post/china-source/</link>
      <pubDate>Wed, 11 Mar 2020 09:54:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/china-source/</guid>
      <description>由于国内的网络原因，很多工具（如 npm, pip）等在国内连接很慢，这里整理了下常用的工具国内源
Linux CentOS 相关地址：http://mirrors.aliyun.com/repo/
首先备份
1  sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak   下载源
1 2 3 4 5  # http://mirrors.aliyun.com/repo/Centos-6.repo # http://mirrors.aliyun.com/repo/Centos-7.repo # http://mirrors.aliyun.com/repo/Centos-8.repo wget http://mirrors.aliyun.com/repo/Centos-7.repo mv Centos-7.repo /etc/yum.repos.d/CentOS-Base.repo   生成缓存
1 2 3  yum clean all # 清除系统所有的 yum 缓存 yum makecache # 生成 yum 缓存 yum update # 更新 yum   Debian 配置国内源
1 2 3 4 5 6 7 8 9 10 11 12  cp /etc/apt/source.</description>
    </item>
    
    <item>
      <title>Linux 下安装 SVN</title>
      <link>https://blog.ovenx.cn/post/linux-svn/</link>
      <pubDate>Mon, 09 Mar 2020 08:00:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/linux-svn/</guid>
      <description>本文的环境：
 centos 7.6 svn 1.7.14  安装 1  yum install subversion   创建仓库 新建一个名为 test 的代码仓库
1 2  mkdir /var/svn/test svnadmin create /var/svn/test   此时 test 目录的结构如下
1 2 3 4 5 6 7 8  drwxr-xr-x. 6 root root 86 2月 29 13:13 . drwxrwxrwx. 8 root root 102 3月 9 11:09 .. drwxr-xr-x. 2 root root 54 3月 9 09:24 conf drwxr-sr-x. 6 root root 253 2月 29 13:45 db -r--r--r--.</description>
    </item>
    
    <item>
      <title>Linux 升级 Python3</title>
      <link>https://blog.ovenx.cn/post/upgrade-python3/</link>
      <pubDate>Tue, 18 Feb 2020 10:07:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/upgrade-python3/</guid>
      <description>本文的系统版本 centos7 x64，默认的 python 版本为 2.7，升级之后的版本为 3.8.1
安装依赖包 1 2  yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make yum install libffi-devel # 缺少这个 make 时会报 ModuleNotFound：No module named &amp;#39;_ctypes&amp;#39; 错误   下载源码包 1 2  wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz tar -zxvf Python-3.8.1.tgz   编译 1 2 3  cd Python-3.8.1.tgz ./configure make &amp;amp;&amp;amp; make instal   修改默认 python 及 pip 命令 1 2 3 4  mv /usr/bin/python /usr/bin/python.</description>
    </item>
    
    <item>
      <title>CentOS 下安装字体</title>
      <link>https://blog.ovenx.cn/post/centos-install-fonts/</link>
      <pubDate>Mon, 17 Feb 2020 23:05:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/centos-install-fonts/</guid>
      <description>本文的系统版本 centos7 x64
查看字体 1  fc-list   安装字体 1  cp xxx.ttf /usr/share/fonts/ # copy fonts to /usr/share/fonts   建立字体缓存 1 2 3 4 5  cd /usr/share/fonts/ chmod 755 *.ttf # 修改字体权限 mkfontscale # 依赖 mkfonts mkfontdir fc-cache -fv # 依赖 fontconfig   </description>
    </item>
    
    <item>
      <title>搭建 Webpack4 和 Vue2 项目</title>
      <link>https://blog.ovenx.cn/post/webpack4-vue2/</link>
      <pubDate>Tue, 11 Feb 2020 16:54:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/webpack4-vue2/</guid>
      <description>本文的环境：
 vue 2.6.11 webpack 4.41.5 babel 7.8.4 node 12.13.1  安装 webpack 1  npm webpack webpack-cli -g   初始化项目  创建目录，初始化  1 2 3  mkdir webpack4-vue2 cd webpack4-vu2 npm init    安装 webpack-dev-server  1  npm install webpack webpack-dev-server --save-dev    新建 webpack.config.js  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var path = require(&amp;#39;path&amp;#39;); var webpack = require(&amp;#39;webpack&amp;#39;); module.</description>
    </item>
    
    <item>
      <title>Flask-blog 部署</title>
      <link>https://blog.ovenx.cn/post/flask-blog-deploy/</link>
      <pubDate>Sun, 09 Feb 2020 20:27:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/flask-blog-deploy/</guid>
      <description>本文的 python 环境为 python3.8.1
预览地址：首页 、后台管理
安装 flask-blog clone 代码到本地
1 2  cd /www git clone https://github.com/ovenx/flask-blog.git   安装虚拟环境
1 2  python -m venv venv . venv/bin/activate   安装依赖
1  pip install -r requirements.txt   创建数据库,导入数据表
1 2  create database flask-blog source /www/flask-blog/blog/schema.sql   创建配置文件，修改数据库配置
1  cp /www/flask-blog/blog/config.py.example /www/flask-blog/blog/config.py   使用 gunicorn flask 自带的 server 不能用于生产环境，需要使用其他的 server 替代，一般会使用 gunicorn。
1  gunicorn -w4 -b127.</description>
    </item>
    
    <item>
      <title>Hexo&#43;Github 搭建个人博客</title>
      <link>https://blog.ovenx.cn/post/hexo-github/</link>
      <pubDate>Sat, 12 Oct 2019 08:00:00 +0800</pubDate>
      
      <guid>https://blog.ovenx.cn/post/hexo-github/</guid>
      <description>前段时间把博客搬家到了 github 上，这里记录下过程。
安装 hexo 1 2 3 4  npm install hexo hexo init blog cd blog npm install   常用的命令
1 2 3 4 5  hexo new [layout] &amp;lt;title&amp;gt; # 新建文章 hexo g # 生成静态文件 hexo s # 启动服务器 hexo d # 部署网站 hexo d -g # 部署之前预先生成静态文件   github 配置   github 中创建名为 用户名.github.io 的仓库，例如：ovenx.github.io
  配置SSH密钥
  1  ssh-keygen -t rsa -C &amp;#34;your_email@example.</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt 小记</title>
      <link>https://blog.ovenx.cn/post/lets-encrypt/</link>
      <pubDate>Thu, 12 Oct 2017 08:00:00 +0000</pubDate>
      
      <guid>https://blog.ovenx.cn/post/lets-encrypt/</guid>
      <description>本文的环境是 nginx1.3 + centos7，nginx 设置的根目录 /www
生成 Diffie-Hellman Parameters 生成这个文件的目的是加强 ssl 的安全性。 当然这一步不是必需的，但是如果没有这一步，网站的 ssl 评级将无法到达 A+。
1  sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048   配置 nginx ssl 添加文件 /etc/nginx/default.d/ssl.conf 这里参考 https://cipherli.st/。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ssl_protocols TLSv1.2;# Requires nginx &amp;gt;= 1.13.0 else use TLSv1.2 ssl_prefer_server_ciphers on; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA; ssl_session_timeout 10m; ssl_session_cache shared:SSL:10m; ssl_session_tickets off; # Requires nginx &amp;gt;= 1.</description>
    </item>
    
  </channel>
</rss>
