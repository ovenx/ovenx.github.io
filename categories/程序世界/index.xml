<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程序世界 on owen&#39;s blog</title>
    <link>/categories/%E7%A8%8B%E5%BA%8F%E4%B8%96%E7%95%8C/</link>
    <description>Recent content in 程序世界 on owen&#39;s blog</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Jul 2021 17:00:57 +0800</lastBuildDate><atom:link href="/categories/%E7%A8%8B%E5%BA%8F%E4%B8%96%E7%95%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Tips</title>
      <link>/post/go-tips/</link>
      <pubDate>Mon, 19 Jul 2021 17:00:57 +0800</pubDate>
      
      <guid>/post/go-tips/</guid>
      <description>gomod 开启 gomod 1.13 以前
GO111MODULE=on GOPROXY=https://goproxy.io 1.13 以后
go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct go get 使用 go get -u # 升级包版本 go get -u=path # 升级到最新的修订版 go get package@version # 升级到某个版本 go mod 基本操作 go mod init mod_name ## 初始化 mod go mod download ## 下载 mod 到本地 cache $GOPATH/pkg/mod 和 $GOPATH/pkg/sum下 go mod edit # 编辑 go.mod 文件 go mod tidy # 删除不使用的 mod go mod vendor # 生成 vendor 目录 go mod verify # 验证依赖 go mod why # 查找依赖 go clean --modcache # 清楚 module 缓存 格式化整个项目代码 gofmt -s -w -l .</description>
    </item>
    
    <item>
      <title>修改常用端口</title>
      <link>/post/modify-ports/</link>
      <pubDate>Fri, 16 Jul 2021 10:00:00 +0800</pubDate>
      
      <guid>/post/modify-ports/</guid>
      <description>修改 ssh 22 端口 vi /etc/ssh/sshd_config Port xxxx sysemctl restart sshd 修改 git 对应端口 vi /.git/config
url = ssh://git@server:xxxx/root/test.git rsync 指定端口
rsync -e &amp;#39;ssh -p xxxx&amp;#39; ssh 指定端口
ssh -p xxxx root@server &amp;#34;systemctl restart heepark&amp;#34; 修改 MySQL 3306 端口 vi /etc/my.cnf.d/server.cnf [mysqld] port=xxxx systemctl restart mariadb </description>
    </item>
    
    <item>
      <title>使用 Systemd 部署 Golang 应用</title>
      <link>/post/go-deploy/</link>
      <pubDate>Tue, 02 Feb 2021 18:00:00 +0800</pubDate>
      
      <guid>/post/go-deploy/</guid>
      <description>新建 systemd 文件 在 /etc/systemd/system/ 目录下新建service example.servie
[Unit] Description=example [Service] Type=simple Restart=always RestartSec=5 ExecStart=/www/example/main # 可执行文件的路径 ExecReload=/bin/kill -HUP $MAINPID PIDFile=/var/run/example.pid # pid file WorkingDirectory=/www/example [Install] WantedBy=multi-user.target 重新加载配置文件
systemctl daemon-reload 常用操作
systemctl start example systemctl restart example # 重启 systemctl enable example # 添加自启动 配置 nginx 代理 server { server_name example.com; listen 443 http2 ssl; listen [::]:443 http2 ssl; ssl_certificate /etc/letsencrypt/live/example.cn/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.cn/privkey.pem; include /etc/nginx/default.d/ssl.conf; root /www/example; index index.html; location / { proxy_pass http://127.</description>
    </item>
    
    <item>
      <title>PostgreSQL 使用教程</title>
      <link>/post/postgresql/</link>
      <pubDate>Mon, 25 Jan 2021 17:45:00 +0800</pubDate>
      
      <guid>/post/postgresql/</guid>
      <description>安装环境 Linux 版本： centos 7.6 PostgreSQL 版本：13 安装 postgresql sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86\_64/pgdg-redhat-repo-latest.noarch.rpm sudo yum install -y postgresql13-server sudo /usr/pgsql-13/bin/postgresql-13-setup initdb sudo systemctl enable postgresql-13 sudo systemctl start postgresql-13 参考来源：https://www.postgresql.org/download/linux/redhat/
添加用户和数据库 使用 psql sudo -u postgres psql # 切换为 postgres 用户登录 psql \password # 设置默认密码 create user myuser with password &amp;#39;mypass&amp;#39;; # 添加用户 create database mydb OWNER myuser; # 添加数据库 grant all privileges on database mydb to myuser; # 添加权限 \q # quit 使用 shell sudo -u postgres createuser --superuser myuser; # 添加用户 sudo -u postgres psql # 登录 psql 设置密码 \password myuser \q sudo -u postgres createdb -O myuser mydb # 添加数据库 登录数据库 本地登录 psql -h 127.</description>
    </item>
    
    <item>
      <title>WSL2 常见问题</title>
      <link>/post/wsl2-config/</link>
      <pubDate>Thu, 03 Dec 2020 15:24:00 +0800</pubDate>
      
      <guid>/post/wsl2-config/</guid>
      <description>安装 wsl2 开启 wsl2
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 设置默认 wsl2
wsl --set-default-version 2 设置默认发行版
wsl -s Ubuntu-20.04 启动和停止 wsl 服务 wsl --shutdown # net stop LxssManager 文件权限问题 由于 windows 文件系统是 NTFS, 在 wsl 在所有的文件权限都会是 777。解决方法是修改配置文件 /etc/wsl.conf
[automount] enabled = true options = &amp;#34;metadata,umask=22,fmask=11&amp;#34; mountFsTab = false 重启后文件的权限就不再都是 777 了。
wsl 文件在 windows 系统中的位置 可以把它映射到网络位置
\\wsl$ 设置默认 root 登录 debian config --default-user root 修改 wsl 位置 关闭 wsl</description>
    </item>
    
    <item>
      <title>Git 常用操作笔记</title>
      <link>/post/git-notes/</link>
      <pubDate>Wed, 29 Jul 2020 08:00:00 +0800</pubDate>
      
      <guid>/post/git-notes/</guid>
      <description>提交 pull request 的最佳实践 1. 首先 fork 仓库 添加一个自己的仓库副本
2. 添加 upstream source git remote add upstrem URL 3. 创建一个 dev 分支 git checkout -b dev git commit -m &amp;#34;add new feature&amp;#34; 4. 开发及测试完成后 Rebase git fetch upstream git rebase upstream/master 5. 推送本地开发分支 git push origin dev 6. 发起 pull request 在 github 上发起 pull request，选择 dev 分支，填好对应的 description
Git回滚代码到某个 commit 回退命令：
git reset --hard HEAD^ #回退到上个版本 git reset --hard HEAD~3 #回退到前 3 次提交之前，以此类推，回退到 n 次提交之前 git reset --hard commit_id #退到/进到指定 commit 回退版本后直接 push 会出错，需要使用 &amp;ndash;force 强制 push</description>
    </item>
    
    <item>
      <title>MySQL 设置默认编码为 utf8mb4</title>
      <link>/post/mysql-utf8mb4/</link>
      <pubDate>Tue, 30 Jun 2020 10:37:16 +0800</pubDate>
      
      <guid>/post/mysql-utf8mb4/</guid>
      <description>mariadb 修改配置文件
vim /etc/my.conf.d/server.conf [mysqld] character_set_server=utf8mb4 collation-server=utf8mb4_general_ci init_connect=&amp;#39;SET NAMES utf8mb4&amp;#39; skip-character-set-client-handshake=true 重启 mariadb
systemctl restart mariadb 查看编码
SHOW VARIABLES WHERE Variable_name LIKE &amp;#39;character\_set\_%&amp;#39; OR Variable_name LIKE &amp;#39;collation%&amp;#39;; mysql 修改配置文件
vim /etc/my.cnf [client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character_set_server=utf8mb4 collation-server=utf8mb4_general_ci init_connect=&amp;#39;SET NAMES utf8mb4&amp;#39; skip-character-set-client-handshake=true 重启 mariadb
systemctl restart mysqld 查看编码
SHOW VARIABLES WHERE Variable_name LIKE &amp;#39;character\_set\_%&amp;#39; OR Variable_name LIKE &amp;#39;collation%&amp;#39;; </description>
    </item>
    
    <item>
      <title>WSL2 Ubuntu 配置</title>
      <link>/post/wsl2-ubuntu/</link>
      <pubDate>Tue, 23 Jun 2020 18:24:00 +0800</pubDate>
      
      <guid>/post/wsl2-ubuntu/</guid>
      <description>系统版本：Ubuntu-20.04
配置国内源 修改 source.list
cp /etc/apt/source.list /etc/apt/source.list.bak vi source.list # 复制下面内容到 source.list deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.</description>
    </item>
    
    <item>
      <title>Linux 下搭建 git 服务器</title>
      <link>/post/deploy-git/</link>
      <pubDate>Mon, 16 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>/post/deploy-git/</guid>
      <description>安装 git yum install git git-core 创建 git 用户 为了服务器的安全，一般不会直接使用 root 用户来运行 git 服务。我们可以新建一个 git 用户专门用来执行 git 服务。
# 添加一个 git 用户 sudo adduser git # 设置密码 passwd git # 禁用shell登录 sudo vi /etc/passwd git: x:1001:1002:,,,:/home/git:/bin/bash # 修改为下面的 git: x:1001:1002:,,,:/home/git:/usr/bin/git-shell 这样，git 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为我们为 git 用户指定的 git-shell每次一登录就自动退出。
创建证书登录 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件里，一行一个。
注意 authorized_keys 的权限要设置为 600，.ssh 文件夹设置为 700,没有这个文件的话可以自己创建,注意 .ssh的所有者要为 git:git
新建 git 仓库 mkdir /opt/git cd /opt/git git init --bare home.</description>
    </item>
    
    <item>
      <title>PHP 配合 Rsync 同步推送代码到服务器</title>
      <link>/post/rsync-php/</link>
      <pubDate>Thu, 12 Mar 2020 10:00:41 +0800</pubDate>
      
      <guid>/post/rsync-php/</guid>
      <description>前言 之前搭建公司开发环境有一个需求，需要将本地测试服务器中的代码同步推送到线上的服务器。后面开始研究 rsync，中途踩了很多坑，故在此记录下一些主要的操作和注意事项
Rsync 设置 本地同步 同步单个文件
rsync -avz /etc/passwd /tmp/ # 同步 passwd 文件到 tmp 目录下 同步目录下所有文件（包含目录本身）
mkdir /root/test1 echo &amp;#34;test1&amp;#34; &amp;gt; /root/test1/file1 rsync -avz /root/test1 /tmp/ # 同步 test1 目录 文件到 tmp 目录下 同步目录下所有文件（不包含目录本身）
mkdir /root/test2 echo &amp;#34;test&amp;#34; &amp;gt; /root/test2/file2 rsync -avz /root/test2/ /tmp/ # 同步 test2 目录 文件到 tmp 目录下 特别注意后面以 / 结尾不包含目录，没有 / 则包含目录
通过 SSH 同步到远程服务器 # 本地服务器 echo &amp;#34;test&amp;#34; &amp;gt; /root/rsync_file rsync -avz /root/rsync_file root@remote_ip:/root/rsync_file # 推送到远程服务器 # 也可以指定 key 文件实现免密处理 rsync -avz -e &amp;#34;ssh /rsync/ssh-key&amp;#34; /root/rsync_file root@remote_ip:/root/rsync_file # 远程服务器 cat /root/rsync_file test 使用 ssh 可以实现推送到远程服务器的工作，但是存在很多问题。最主要的一点是 PHP 脚本执行 ssh 时会存在权限的问题。</description>
    </item>
    
    <item>
      <title>常用工具国内源配置</title>
      <link>/post/china-source/</link>
      <pubDate>Wed, 11 Mar 2020 09:54:00 +0800</pubDate>
      
      <guid>/post/china-source/</guid>
      <description>由于国内的网络原因，很多工具（如 npm, pip）等在国内连接很慢，这里整理了下常用的工具国内源
Linux CentOS 相关地址：http://mirrors.aliyun.com/repo/
首先备份
sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 下载源
# http://mirrors.aliyun.com/repo/Centos-6.repo # http://mirrors.aliyun.com/repo/Centos-7.repo # http://mirrors.aliyun.com/repo/Centos-8.repo wget http://mirrors.aliyun.com/repo/Centos-8.repo mv Centos-8.repo /etc/yum.repos.d/CentOS-Base.repo 生成缓存
yum clean all # 清除系统所有的 yum 缓存 yum makecache # 生成 yum 缓存 yum update # 更新 yum Debian 配置国内源
cp /etc/apt/sources.list /etc/apt/sources.list.bak vi /etc/apt/sources.list # 复制下面内容到 sources.list deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main deb-src http://mirrors.aliyun.com/debian-security buster/updates main deb http://mirrors.</description>
    </item>
    
    <item>
      <title>Linux 下安装 SVN</title>
      <link>/post/linux-svn/</link>
      <pubDate>Mon, 09 Mar 2020 08:00:00 +0000</pubDate>
      
      <guid>/post/linux-svn/</guid>
      <description>本文的环境：
centos 7.6 svn 1.7.14 安装 yum install subversion 创建仓库 新建一个名为 test 的代码仓库
mkdir /var/svn/test svnadmin create /var/svn/test 此时 test 目录的结构如下
drwxr-xr-x. 6 root root 86 2月 29 13:13 . drwxrwxrwx. 8 root root 102 3月 9 11:09 .. drwxr-xr-x. 2 root root 54 3月 9 09:24 conf drwxr-sr-x. 6 root root 253 2月 29 13:45 db -r--r--r--. 1 root root 2 2月 29 13:13 format drwxr-xr-x. 2 root root 231 2月 29 14:01 hooks drwxr-xr-x.</description>
    </item>
    
    <item>
      <title>Linux 升级 Python3</title>
      <link>/post/upgrade-python3/</link>
      <pubDate>Tue, 18 Feb 2020 10:07:00 +0000</pubDate>
      
      <guid>/post/upgrade-python3/</guid>
      <description>本文的系统版本 centos7 x64，默认的 python 版本为 2.7，升级之后的版本为 3.8.1
安装依赖包 yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make yum install libffi-devel # 缺少这个 make 时会报 ModuleNotFound：No module named &amp;#39;_ctypes&amp;#39; 错误 下载源码包 wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz tar -zxvf Python-3.8.1.tgz 编译 cd Python-3.8.1.tgz ./configure make &amp;amp;&amp;amp; make instal 修改默认 python 及 pip 命令 mv /usr/bin/python /usr/bin/python.bak ln -s /usr/local/bin/python3 /usr/bin/python mv /usr/bin/pip /usr/bin/pip.bak ln -s /usr/local/bin/pip3 /usr/bin/pip 处理 yum 由于 yum 需要使用 python 2.</description>
    </item>
    
    <item>
      <title>CentOS 下安装字体</title>
      <link>/post/centos-install-fonts/</link>
      <pubDate>Mon, 17 Feb 2020 23:05:00 +0000</pubDate>
      
      <guid>/post/centos-install-fonts/</guid>
      <description>本文的系统版本 centos7 x64
查看字体 fc-list 安装字体 cp xxx.ttf /usr/share/fonts/ # copy fonts to /usr/share/fonts 建立字体缓存 cd /usr/share/fonts/ chmod 755 *.ttf # 修改字体权限 mkfontscale # 依赖 mkfonts mkfontdir fc-cache -fv # 依赖 fontconfig </description>
    </item>
    
    <item>
      <title>搭建 Webpack4 和 Vue2 项目</title>
      <link>/post/webpack4-vue2/</link>
      <pubDate>Tue, 11 Feb 2020 16:54:00 +0000</pubDate>
      
      <guid>/post/webpack4-vue2/</guid>
      <description>本文的环境：
vue 2.6.11 webpack 4.41.5 babel 7.8.4 node 12.13.1 安装 webpack npm webpack webpack-cli -g 初始化项目 创建目录，初始化 mkdir webpack4-vue2 cd webpack4-vu2 npm init 安装 webpack-dev-server npm install webpack webpack-dev-server --save-dev 新建 webpack.config.js var path = require(&amp;#39;path&amp;#39;); var webpack = require(&amp;#39;webpack&amp;#39;); module.exports = { entry: &amp;#39;./src/main.js&amp;#39;, output: { path: path.resolve(__dirname, &amp;#39;./dist&amp;#39;), publicPath: &amp;#39;/dist/&amp;#39;, filename: &amp;#39;build.js&amp;#39; }, devServer: { historyApiFallback: true, overlay: true }, module: { rules: [] } } 配置 babel babel 的目的是为了将 ES6 转为 ES5 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。参考文档</description>
    </item>
    
    <item>
      <title>Flask-blog 部署</title>
      <link>/post/flask-blog-deploy/</link>
      <pubDate>Sun, 09 Feb 2020 20:27:00 +0000</pubDate>
      
      <guid>/post/flask-blog-deploy/</guid>
      <description>本文的 python 环境为 python3.8.1
预览地址：首页 、后台管理
安装 flask-blog clone 代码到本地
cd /www git clone https://github.com/ovenx/flask-blog.git 安装虚拟环境
python -m venv venv . venv/bin/activate 安装依赖
pip install -r requirements.txt 创建数据库,导入数据表
create database flask-blog source /www/flask-blog/blog/schema.sql 创建配置文件，修改数据库配置
cp /www/flask-blog/blog/config.py.example /www/flask-blog/blog/config.py 使用 gunicorn flask 自带的 server 不能用于生产环境，需要使用其他的 server 替代，一般会使用 gunicorn。
gunicorn -w4 -b127.0.0.1:8000 run:app // 在venv中启动 此时我们使用了 8000 来访问，替代了原先的端口。-w 表示 worker 数量 -b 表示端口地址。
到这里其实我们已经可以正常运行 flask-blog 程序了，用 nginx 反代 8000 端口即可。但是 gunicorn 管理起来比较麻烦，为了管理方便我们需要使用 supervisor 来管理 gunicorn 进程。</description>
    </item>
    
    <item>
      <title>Hexo&#43;Github 搭建个人博客</title>
      <link>/post/hexo-github/</link>
      <pubDate>Sat, 12 Oct 2019 08:00:00 +0800</pubDate>
      
      <guid>/post/hexo-github/</guid>
      <description>前段时间把博客搬家到了 github 上，这里记录下过程。
安装 hexo npm install hexo hexo init blog cd blog npm install 常用的命令
hexo new [layout] &amp;lt;title&amp;gt; # 新建文章 hexo g # 生成静态文件 hexo s # 启动服务器 hexo d # 部署网站 hexo d -g # 部署之前预先生成静态文件 github 配置 github 中创建名为 用户名.github.io 的仓库，例如：ovenx.github.io
配置SSH密钥
ssh-keygen -t rsa -C &amp;#34;your_email@example.com&amp;#34; 把生成后好的 id_ras.pub 文件中的内容复制到 github 中的 SSH keys 设置中
设置本地 git 的用户信息 git config --global user.name &amp;#34;username&amp;#34; #用户名 git config --global user.</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt 小记</title>
      <link>/post/lets-encrypt/</link>
      <pubDate>Thu, 12 Oct 2017 08:00:00 +0000</pubDate>
      
      <guid>/post/lets-encrypt/</guid>
      <description>本文的环境是 nginx1.3 + centos7，nginx 设置的根目录 /www
生成 Diffie-Hellman Parameters 生成这个文件的目的是加强 ssl 的安全性。 当然这一步不是必需的，但是如果没有这一步，网站的 ssl 评级将无法到达 A+。
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 配置 nginx ssl 添加文件 /etc/nginx/default.d/ssl.conf 这里参考 https://cipherli.st/。
ssl_protocols TLSv1.2;# Requires nginx &amp;gt;= 1.13.0 else use TLSv1.2 ssl_prefer_server_ciphers on; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA; ssl_session_timeout 10m; ssl_session_cache shared:SSL:10m; ssl_session_tickets off; # Requires nginx &amp;gt;= 1.5.9 ssl_stapling on; # Requires nginx &amp;gt;= 1.3.7 ssl_stapling_verify on; # Requires nginx =&amp;gt; 1.3.7 resolver 8.8.8.8 8.8.4.4 valid=300s; resolver_timeout 5s; add_header Strict-Transport-Security &amp;#34;max-age=63072000; includeSubDomains; preload&amp;#34;; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &amp;#34;1; mode=block&amp;#34;; add_header X-Robots-Tag none; 如果上一步生成了 dhparam.</description>
    </item>
    
  </channel>
</rss>
